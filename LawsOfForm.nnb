{
    "cells": [
        {
            "language": "typescript",
            "source": [
                "// 1. The Form\n\n// Distinction is perfect continence\ntype Distiction = {\n  space: Distiction | Array<Distiction>,\n  name: string\n}\n\n// Axiom 1. Law of calling\nconst calling: any = (m: any, n: any) => {\n  if (JSON.stringify(m) === JSON.stringify(n)) return m;\n  return false\n}\n\n// Axiom 2. Law of crossing\nconst crossing: any = (m: any, n: any) => {\n  if (JSON.stringify(m) === JSON.stringify(n)) return false;\n  return m\n}"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "// 2. Forms Taken Out of the Form\n\n// Draw a distinction\nconst { display } = require('node-kernel');\nconst pug = require('pug');\n\n// The Form\nconst form: Distiction = {\n  space: {},\n  name: 'form'\n}\n\nlet output = pug.renderFile('./distinction.pug', {...form});\ndisplay.html(output);"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/html",
                            "value": [
                                "<style> table, th, tr { text-align: left; }</style><link rel=\"stylesheet\" type=\"text/css\" href=\"./style.css\"/><div class=\"context\"><div class=\"distinction\"><p class=\"name\">form</p></div></div>"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "// Expression\nconst expression: Distiction = {\n  space: [{...form}],\n  name: 'expression'\n}\n\nconst draw = (expression: Distiction) => {\n  const output = pug.renderFile('./distinction.pug', {...expression});\n  display.html(output)\n}\n\ndraw(expression)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/html",
                            "value": [
                                "<style> table, th, tr { text-align: left; }</style><link rel=\"stylesheet\" type=\"text/css\" href=\"./style.css\"/><div class=\"context\"><div class=\"distinction\"><p class=\"name\">expression</p><div class=\"distinction\"><p class=\"name\">form</p></div></div></div>"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "// Form of Condensation [][] = []\n// Take an expresion the inmediate space of the expression will be evaluated.\nconst condensation: Distinction = (expression: Distiction) => {\n  if (Array.isArray(expression.space) && (expression.space.length % 2 === 0)) {\n    const half = Math.floor(expression.space.length / 2)\n    let left = expression.space.slice(0, half);\n    let right = expression.space.slice(half, expression.space.length);\n    const evaluation = calling(left, right);\n    if (evaluation) {\n      return {\n        space: evaluation,\n        name: expression.name\n      }\n    }\n  }\n  return expression;\n}\n\nconst condensationForm: Distiction = {\n  space: [{ ...form }, { ...form }],\n  name: 'condensation'\n}\n\ndraw({...condensationForm})\ndraw(condensation(condensationForm))"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/html",
                            "value": [
                                "<style> table, th, tr { text-align: left; }</style><link rel=\"stylesheet\" type=\"text/css\" href=\"./style.css\"/><div class=\"context\"><div class=\"distinction\"><p class=\"name\">condensation</p><div class=\"distinction\"><p class=\"name\">form</p></div><div class=\"distinction\"><p class=\"name\">form</p></div></div></div>"
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/html",
                            "value": [
                                "<style> table, th, tr { text-align: left; }</style><link rel=\"stylesheet\" type=\"text/css\" href=\"./style.css\"/><div class=\"context\"><div class=\"distinction\"><p class=\"name\">condensation</p><div class=\"distinction\"><p class=\"name\">form</p></div></div></div>"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "// Form of Cancelation [[]] = false\n// Take an expresion the inmediate space of the expression will be evaluated.\nconst cancelation: Distiction = (expression: Distiction) => {\n  const selectSpace = (space: Distiction, depth: Number | Boolean) => {\n    let selectedSpace = {}\n\n    if (Array.isArray(space)) {\n      if (space.length > 1) {\n        return false\n      }\n      selectedSpace = {...space[0]}\n    } else {\n      selectedSpace = {...space}\n    }\n\n    if (depth === 0) {\n      selectedSpace.space = {}\n    } else if (depth === 1) {\n      return selectedSpace.space // What is selected spacce is an array of a single element?\n    }\n\n    return selectedSpace\n  }\n\n  const space0 = selectSpace(expression.space, 0)\n  const space1 = selectSpace(expression.space, 1)\n  const evaluation = crossing(space0, space1);\n  console.log('evaluation', evaluation)\n\n  if (!evaluation) {\n    return {\n      space: evaluation,\n      name: expression.name\n    }\n  }\n\n  return expression\n}\n\n// This function cross is etremely important but has not been necesary until now\nconst cross = (form: Distiction, cross: Distiction) => {\n  let crossed = {...form};\n  crossed.space = {...cross};\n\n  return crossed\n}\n\nconst cancelationForm: Distiction = {\n  space: cross(form, form),\n  name: 'cancelation'\n}\n\ncancelation(cancelationForm)\ndraw(cancelationForm)\ndraw(cancelation(cancelationForm))\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "evaluation false",
                                "evaluation false",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/html",
                            "value": [
                                "<style> table, th, tr { text-align: left; }</style><link rel=\"stylesheet\" type=\"text/css\" href=\"./style.css\"/><div class=\"context\"><div class=\"distinction\"><p class=\"name\">cancelation</p><div class=\"distinction\"><p class=\"name\">form</p><div class=\"distinction\"><p class=\"name\">form</p></div></div></div></div>"
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/html",
                            "value": [
                                "<style> table, th, tr { text-align: left; }</style><link rel=\"stylesheet\" type=\"text/css\" href=\"./style.css\"/><div class=\"context\"><div class=\"distinction\"><p class=\"name\">cancelation</p></div></div>"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                ""
            ],
            "outputs": []
        }
    ]
}